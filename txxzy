#define _WCHAR_T_DEFINED
#define _STDCALL_SUPPORTED
#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>       /* sin */
#define PI 3.14159265

int WAY;
int X1, Y1, X2, Y2, X3, Y3, X4, Y4,X5,Y5;

void dda_line(int x0, int y0, int x1, int y1)///DDA算法
{

	int dx, dy, maxx, i;
	float x, y, xIn, yIn;
	dx = x1 - x0;
	dy = y1 - y0;
	x = x0;
	y = y0;
	if (abs(dx) > abs(dy))
		maxx = abs(dx);
	else
		maxx = abs(dy);
	xIn = (float)dx / (float)maxx;
	yIn = (float)dy / (float)maxx;
	for (i = 0; i <= maxx; i++)
	{
		glBegin(GL_POINTS);///画点函数,只有两个参数,
		glVertex2i(int(x + 0.5), int(y + 0.5));///根据x,y进行划线
		glEnd();
		//printf("%d %d\n", (int)(x + 0.5), (int)(y + 0.5));
		x += xIn;
		y += yIn;
	}
}



void display(void)///创建一个没有参数的函数来调用上一个函数
{
	glClear(GL_COLOR_BUFFER_BIT); ///刷新缓存,在窗口中出现
	if (WAY == 1)//DDA画线算法画5角形
	{
		int ss,sd;
		scanf_s("%d %d %d %d", &X1, &Y1, &ss,&sd);
		X2 = X1;
		Y2 = Y1;
		for (int i = 0; i < ss; i++)
		{
			int s1, s2;
			s1 = X2 + int(sd * sin((360/ss)*i*PI / 180));
			s2 = Y2 + int(sd * cos((360 / ss)*i*PI / 180));
			dda_line(X2, Y2, s1, s2);
			X2 = s1;
			Y2 = s2;
				//sin(param*PI / 180);
		}
		dda_line(X2, Y2, X1, Y1);
		/*scanf_s("%d %d %d %d %d %d %d %d %d %d", &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5);
		dda_line(X1, Y1, X2, Y2);///dda函数的调用
		dda_line(X2, Y2, X3, Y3);
		dda_line(X3, Y3, X4, Y4);
		dda_line(X4, Y4, X5, Y5);
		dda_line(X1, Y1, X5, Y5);*/

	}
	else if (WAY == 3)//中点画线算法画5角形
	{
	//	scanf_s("%d %d %d %d %d %d", &X1, &Y1, &X2, &Y2, &X3, &Y3);
		//midpoint_line(X1, Y1, X2, Y2);///中点画线法调用
		//midpoint_line(X2, Y2, X3, Y3);
		//midpoint_line(X1, Y1, X3, Y3);
		int ss;
		scanf_s("%d %d %d", &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5);
		dda_line(X1, Y1, X2, Y2);///dda函数的调用
		dda_line(X2, Y2, X3, Y3);
		dda_line(X3, Y3, X4, Y4);
		dda_line(X4, Y4, X5, Y5);
		dda_line(X1, Y1, X5, Y5);
	}
	else if (WAY == 2)//DDA画线算法画四边形
	{
		/*int ss;
		scanf_s("%d %d %d", &X1, &Y1, &ss);
		X2 = X1 + ss;
		Y2 = Y1;
		X3 = X1 + ss;
		Y3 = Y1 + ss;
		X4 = X1;
		Y4 = X1 + ss;
		dda_line(X1, Y1, X2, Y2);///dda函数的调用
		dda_line(X2, Y2, X3, Y3);
		dda_line(X3, Y3, X4, Y4);
		dda_line(X1, Y1, X4, Y4);*/
		int ss, sd;
		scanf_s("%d %d %d %d", &X1, &Y1, &ss, &sd);
		X2 = X1;
		Y2 = Y1;
		for (int i = 0; i < ss; i++)
		{
			int s1, s2;
			s1 = X2 + int(sd * sin((360 / ss)*i*PI / 180));
			s2 = Y2 + int(sd * cos((360 / ss)*i*PI / 180));
			midpoint_line(X2, Y2, s1, s2);
			X2 = s1;
			Y2 = s2;
			//sin(param*PI / 180);
		}
		midpoint_line(X2, Y2, X1, Y1);
	}
	else//中点画线算法画四边形
	{
		int ss;
		scanf_s("%d %d %d", &X1, &Y1, &ss);
		X2 = X1 + ss;
		Y2 = Y1;
		X3 = X1 + ss;
		Y3 = Y1 + ss;
		X4 = X1;
		Y4 = X1 + ss;
		//scanf_s("%d %d %d %d %d %d %d %d", &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4);
		midpoint_line(X1, Y1, X2, Y2);///中点画线法调用
		midpoint_line(X2, Y2, X3, Y3);
		midpoint_line(X3, Y3, X4, Y4);
		midpoint_line(X1, Y1, X4, Y4);
	}
	glFlush();///清理缓存来处理函数
}

int main(int argc, char* argv[])
{
	printf("选择画线算法：\n");
	printf("1.DDA画线算法\n2.中点画线算法\n");
	printf("请选择：");
	while (1)
	{
		scanf_s("%d", &WAY);
		if (WAY != 1 && WAY != 2 && WAY != 3 && WAY != 4)
		{
			printf("输入错误，请重新输入：");
			continue;
		}
		break;
	}
		printf("请输入点坐标\n举例：0 0 600 600 100 100\n请在本处输入：");
		/*while (1)
		{
			if (WAY != 4) {
				scanf("%d %d %d %d", &X1, &Y1, &X2, &Y2);
				if (X1 < 0 || Y1 < 0 || X2 < 0 || Y2 < 0)
				{
					printf("输入错误，请重新输入：");
					continue;
				}
				break;
			}
			break;
		}*/
		glutInit(&argc, argv);///glut的初始化
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutInitWindowSize(600, 600);///窗口的大小500x500

		glutInitWindowPosition(0, 0);///定义窗口的位置,在屏幕向左边0像素,屏幕上面向下0像素
		if (WAY == 1)
		{
			glutCreateWindow("DDA画线算法画三角形");///屏幕上方显示的内容
		}
		else if (WAY == 2)
		{
			glutCreateWindow("DDA画线算法画四边形");
		}
		else if (WAY == 3)
		{
			glutCreateWindow("中点画线算法画三角形");
		}
		else if (WAY == 4)
		{
			glutCreateWindow("中点画线算法四边形");
		}
		glClearColor(1.0, 1.0, 1.0, 0.0); ///三个1.0是白色背景,三个0.0是黑色背景
		glColor3f(0, 0, 1);
		gluOrtho2D(0, 1000.0, 0, 1000.0);///在窗口内建立二维直角坐标系,x1,x2,y1,y2
		glutDisplayFunc(display);///在窗口中显示diaplay
		glutMainLoop();
	
	return 0;
}

